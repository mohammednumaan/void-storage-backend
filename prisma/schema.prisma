// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  username String @unique 
  password_hash String @unique
  folders Folder[]
}

model Folder{
  id String @id @default(uuid())
  folderName String

  parent Folder? @relation(name: "parentFolderId", fields: [parentFolder], references: [id], onDelete: Cascade)
  parentFolder String?
  subFolders Folder[] @relation("parentFolderId")

  createdAt DateTime
  files File[]

  user User @relation(fields: [userId], references: [id])
  userId String 


  FolderLinks FolderLinks[]
}

model File{
  id String @id @default(uuid())
  fileName String 
  fileType String
  fileSize Int
  createdAt DateTime
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId String  
  fileUrl String @unique
  FileLinks FileLinks[]

}


model FolderLinks {
  id String @id @default(uuid())
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId String
  expiresAt DateTime
}

model FileLinks {
  id String @id @default(uuid())
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String
  expiresAt DateTime
}

model Session {
  id String @id
  sid String @unique
  data String 
  expiresAt DateTime
}


